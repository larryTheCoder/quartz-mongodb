plugins {
    id 'net.researchgate.release' version '3.1.0'
    id 'com.sourcemuse.mongo' version '2.0.0'
    id 'maven-publish'
    id 'java'
    id 'idea'
    id 'eclipse'
}

group = 'io.github.avi-sanwal'
archivesBaseName = 'quartz-mongodb'

jar {
    archiveVersion = version
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    provided
    implementation.extendsFrom provided
}
sourceSets {
    main { compileClasspath += configurations.provided }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse {
    classpath {
        downloadSources true
        downloadJavadoc true
    }
    jdt {
        sourceCompatibility java.sourceCompatibility
        targetCompatibility java.targetCompatibility
    }
}

dependencies {
    implementation("org.quartz-scheduler:quartz:2.5.0")
    implementation("org.mongodb:mongodb-driver-sync:5.5.1")
    implementation("commons-codec:commons-codec:1.18.0")
    implementation("org.apache.commons:commons-lang3:3.17.0")
    implementation("org.apache.httpcomponents:httpcore:4.4.16")
    implementation("org.slf4j:slf4j-api:2.0.17")

    compileOnly("org.clojure:clojure:1.12.1")

    testImplementation("org.clojure:clojure:1.12.1")
    testImplementation("joda-time:joda-time:2.14.0")
    testImplementation("org.slf4j:slf4j-simple:2.0.17")
    testImplementation("org.codehaus.groovy:groovy-all:3.0.25")
    testImplementation("org.spockframework:spock-core:2.3-groovy-4.0")
    testRuntimeOnly("cglib:cglib-nodep:3.3.0")
    testRuntimeOnly("org.objenesis:objenesis:3.4")
}

release {
    scmAdapters = [net.researchgate.release.GitAdapter]
    versionPropertyFile = 'gradle.properties'
    git {
      requireBranch.set(/release-\d+.\d+.\d+/)
      pushOptions.set(["--force"])
    }
    pushReleaseVersionBranch = 'master'
}

task sourceJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    jar.reproducibleFileOrder = true
    jar.preserveFileTimestamps = false
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

artifacts {
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        quartzMongoDB(MavenPublication) {
            groupId = group
            artifactId = archivesBaseName
            version = version

            artifact sourceJar {
                archiveClassifier = "sources"
            }
            
            from components.java

            pom {
                name = 'Mongo QuartzDB Scheduler'
                packaging = 'jar'
                description = 'Forked and updated version of https://github.com/michaelklishin/quartz-mongodb.'
                url = 'https://github.com/avi-sanwal/quartz-mongodb'

                scm {
                    connection='scm:git:git:github.com/avi-sanwal/quartz-mongodb/'
                    developerConnection='scm:git:git:github.com/avi-sanwal/quartz-mongodb/'
                    url='https://github.com/avi-sanwal/quartz-mongodb/'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "Clojars"
            url = uri("https://repo.clojars.org/")
            credentials {
                username = project.findProperty("clojars.user") ?: System.getenv("CLOJARS_USERNAME")
                password = project.findProperty("clojars.password") ?: System.getenv("CLOJARS_PASSWORD")
            }
        }
    }
}

mongo {
    port 27017
    logging 'console'
    journalingEnabled true
}

test {
 beforeTest { descriptor ->
    logger.lifecycle("Running test \"${descriptor}\"")
 }
}

// force test runs even when there are no test changes,
// such test loops are very useful for testing race conditions
// and other concurrency hazards
test.outputs.upToDateWhen { false }

tasks.withType(Test){
    runWithMongoDb = true
    mongo {
        journalingEnabled true
        port 27017
        logging 'console'
        mongoVersion 'PRODUCTION'
    }
}
